/*
    Copyright Â© 2011, 2012 MLstate

    This file is part of Opa.

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

var net = require('net');
var fs = require('fs');
var tls = require('tls');

/**
 * @author Arthur Azevedo de Amorim
 */

/** @opaType outcome('a, 'b) */

/** @externType continuation('a) */
/** @externType SSL.secure_type */

// A record containing:
//   connection: The connection object returned by net.connect
//   id: The unique connection id
//   has_connected: Whether the connection was already established
//   closed: Flag that indicates whether the connection has been closed
//   data: An array of received data waiting to be read
//   error: A possible connection error
//   read_callback: A continuation waiting for incoming data or an error
//   write_callback: A continuation waiting for the end of an write or an error
/** @externType Socket.connection */

// Call function field in obj with argument value.
// Remove that function from the object.
// Used to notify and remove listeners.
function unregister_and_call(obj, field, value) {
    var callback = obj[field];
    obj[field] = null;
    callback(value);
}

// Socket functions come in two flavors: those that handle errors (*_with_err_cont)
// and those that don't. For the latter, we use callbacks that always expect a result
// and fail on errors, while for the former we wrap errors and pass them to the
// continuation.

// We now handle both binary and string types.  The socket has to be
// opened in either binary or string mode (connect_... or binary_connect...).
// Reads and writes will still work but result in copying if they receive
// data of the wrong kind.

function callback_plain(cont, message, convert) {

    return function (data) {
        if ('success' in data) {
          switch (convert) {
          case 'string_of_binary': return_(cont, string_of_binary8(data.success)); break;
          case 'binary_of_string': return_(cont, binary_of_string8(data.success)); break;
          default: return_(cont, data.success); break;
          }
        } else { // data.failure
            error(message + ": " + data.failure);
        }
        return;
    }

}

function callback_with_err_cont(cont, convert) {

    return function (data) {
        if ('success' in data) {
          switch (convert) {
          case 'string_of_binary': return_(cont, js_success(string_of_binary8(data.success))); break;
          case 'binary_of_string': return_(cont, js_success(binary_of_string8(data.success))); break;
          default: return_(cont, js_success(data.success)); break;
          }
        } else { // data.failure
            return_(cont, js_failure(data.failure));
        }
        return;
    }

}

// Open connection to addr:port, passing outcome (connection object or error)
// to callback. If secure_type is not null, use it to establish a secure connection.

function gather_buffers(a) {
  var i, size;
  for (i=0,size=0; i < a.length; i++) { size += a[i].length; };
  var b = new Buffer(size);
  for (i=0,size=0; i < a.length; i++) { a[i].copy(b, size, 0, a[i].length); size += a[i].length; };
  return b;
}

function get_result(conn) {
  if (conn.is_binary) {
    var buffer = gather_buffers(conn.data);
    conn.data = [];
    return {success:{contents:buffer,length:buffer.length}};
  } else {
    var result = conn.data.join("");
    conn.data = [];
    return {success:result};
  }
}

function do_connect(connection_info, addr, port, secure, secure_type, is_binary, reconnect, callback) {

    function connect_callback() {
        connection_info.has_connected = true;
        callback({success: connection_info});
    }

    if (secure_type) {
        var options = {};

        if (secure) {

          if (secure_type.key) {
            options.key = fs.readFileSync(secure_type.key.cert_key);
            options.passphrase = secure_type.key.cert_pass;
            options.cert = fs.readFileSync(secure_type.key.cert_file);
            if (secure_type.key.ca_file || secure_type.key.ca_path) {
              error("Don't know how to deal with CAs in private key");
            }
          }

          if (secure_type.policy) {
            error("Don't know how to use a SSL policy");
          }
        }

        if (reconnect) {
          options.socket = connection_info.connection;
          options.servername = addr;
        } else {
          options.host = addr;
          options.port = port;
        }
        connection_info.connection =
          tls.connect(options, connect_callback);
    } else {
        connection_info.connection =
            net.connect(port, addr, connect_callback);
    }

    connection_info.connection.setMaxListeners(0);
    connection_info.connection.on('data', function (data) {

        // Disable existing timeout
        //console.log("on data: setTimeout = 0");
        connection_info.connection.setTimeout(0);

        if (connection_info.read_callback) {
          connection_info.data.push(data);
          unregister_and_call(connection_info, 'read_callback', get_result(connection_info));
        } else {
          connection_info.data.push(data);
        }

    });

    connection_info.connection.on('error', function (err) {

        // Ditto
        //console.log("on error: setTimeout = 0");
        connection_info.connection.setTimeout(0);

        // The error raised by node can be treated by several different
        // Opa functions. Thus, we must find out who is expecting
        // an outcome and direct the error there.

        var wrapped_err = {failure: err.toString()};

        if (!connection_info.has_connected) {
            // Since we couldn't even establish the connection, we
            // need to signal the caller.
            callback(wrapped_err);
        } else if (connection_info.read_callback) {
            unregister_and_call(connection_info, 'read_callback', wrapped_err);
        } else if (connection_info.write_callback) {
            unregister_and_call(connection_info, 'write_callback', wrapped_err);
        } else {
            // We keep the error if somebody needs it later
            connection_info.error = err;
        }

    });

    connection_info.connection.on('close', function (had_error) {
        connection_info.closed = true;
    });

    return;

}

function connect_common(addr, port, secure, secure_type, is_binary, callback) {
  var connection_info = {
      connection: null,
      id: Math.floor(Math.random() * 1024 * 1024 * 1024 * 4),
      has_connected: false,
      closed: false,
      data: [],
      error: null,
      read_callback: null,
      write_callback: null,
      is_binary: is_binary
  };
  do_connect(connection_info, addr, port, secure, secure_type, is_binary, false, callback)
}

function reconnect(connection_info, addr, port, secure, secure_type, is_binary, callback) {
  connection_info.connection.removeAllListeners();
  do_connect(connection_info, addr, port, secure, secure_type, is_binary, true, callback)
}

/**
 * @register {string, int, continuation(Socket.connection) -> void}
 * @cpsBypass
 */
function connect(addr, port, cont) {
  return connect_common(addr, port, false, null, false,
                        callback_plain(cont, "Connection failed"));
}

/**
 * @register {string, int, SSL.secure_type, \
              continuation(Socket.connection) -> void}
 * @cpsBypass
 */
function secure_connect(addr, port, secure_type, cont) {
  return connect_common(addr, port, true, secure_type, false,
                        callback_plain(cont, "Connection failed"));
}

/**
 * @register {string, int, \
              continuation(outcome(Socket.connection,string)) -> void}
 * @cpsBypass
 */
function connect_with_err_cont(addr, port, cont) {
    return connect_common(addr, port, false, null, false,
                          callback_with_err_cont(cont));
}

/**
 * @register {string, int, \
              continuation(outcome(Socket.connection,string)) -> void}
 * @cpsBypass
 */
function binary_connect_with_err_cont(addr, port, cont)
{
  return connect_common(addr, port, false, null, true,
                        callback_with_err_cont(cont, 0));
}

/**
 * @register {string, int, SSL.secure_type, \
              continuation(outcome(Socket.connection,string)) -> void}
 * @cpsBypass
 */
function secure_connect_with_err_cont(addr, port, secure_type, cont) {
  return connect_common(addr, port, true, secure_type, false,
                        callback_with_err_cont(cont));
}

/**
 * @register {string, int, bool, SSL.secure_type, \
              continuation(outcome(Socket.connection,string)) -> void}
 * @cpsBypass
 */
function binary_secure_connect_with_err_cont(addr, port, secure, secure_type, cont) {
  return connect_common(addr, port, secure, secure_type, true,
                        callback_with_err_cont(cont));
}

/**
 * @register {Socket.connection, string, int, SSL.secure_type, \
              continuation(outcome(Socket.connection,string)) -> void}
 * @cpsBypass
 */
function binary_secure_reconnect_with_err_cont(connection_info, addr, port, secure_type, cont) {
  return reconnect(connection_info, addr, port, true, secure_type, true,
                   callback_with_err_cont(cont));
}

/**
 * @register {Socket.connection -> void}
 */
function close(connection_info) {
    connection_info.connection.end();
    return;
}

// Write len bytes of data to connection_info, passing the number of bytes written
// to callback if write is succesful, or an error otherwise. If len is null,
// write the whole data. If timeout is not null, write fails after that many ms.
function write_common(connection_info, data, length, timeout, callback) {

  // Bizarre, we seem to get corrupted buffers here in the
  // sense that when the buffer is written to the socket
  // the bytesWritten value increases by more than the data
  // in the socket.  The other end of the socket seems to see
  // the correct data.
  // TODO: investigate buffer reuse wrt. socket writes
  if (length === null) length = data.length;
  var contents2 = new Buffer(length);
  data.contents.copy(contents2,0,0,length);
  data.contents = contents2;

  //console.log("write_common: length="+length+"  data.length="+data.length+"  data=\n"+global.BslPervasives_bindump(data));

    if (connection_info.closed) {
        return callback({failure: 'socked closed'});
    }

    connection_info.write_callback = callback;

    // Since these writes in Opa are blocking, we can assume that
    // this value won't change before the current write. However,
    // we still need to check what causes this variable to be
    // updated.
    var b = connection_info.connection.bytesWritten;
    //console.log("write_common: b="+b);

    var cont = function () {
      // FIXME: What happens if part of the write goes through when
      // we hit a timeout?
      //console.log("write_common: setTimeout = 0");
      connection_info.connection.setTimeout(0);
      if (connection_info.write_callback) {
        var bytes_written = connection_info.connection.bytesWritten - b;
        //console.log("write_common: bytesWritten="+connection_info.connection.bytesWritten);
        //console.log("write_common: unregister_and_call(write_callback)(cont)");
        unregister_and_call(connection_info, 'write_callback', {success: bytes_written});
      }
    };
    // Arrange to work directly with a value of type binary
    switch (typeof(data)) {
    case 'object': // assume it's a binary value
      //console.log("write_common: binary");
      if (length != null) {
        if (length < data.length) {
          //console.log("write_common: length < data.length");
          var b = new Buffer(length);
          data.contents.copy(b, 0, 0, length);
          data.contents = b;
          data.length = length;
        } else if (length > data.length) {
          //console.log("write_common: length > data.length");
          var b = new Buffer(length);
          data.contents.copy(b, 0, 0, data.length);
          b.fill(0, data.length, length);
          data.contents = b;
          data.length = length;
        };
      };
      connection_info.connection.write(data.contents, 'binary', cont);
      break;
    default: // string
      //console.log("write_common: string");
      if (length != null) data = data.substr(0, length);
      connection_info.connection.write(data, 'binary', cont);
      break;
    };

    //console.log("connection_info.connection.listeners(timeout).length="+connection_info.connection.listeners('timeout').length);
    timeout = null;
    if (timeout != null) {
      //console.log("write_common: setTimeout = "+timeout);
        connection_info.connection.setTimeout(timeout, function () {
            //console.log("write_common: unregister_and_call(write_callback)(timeout)");
            unregister_and_call(connection_info, 'write_callback',
                                {failure: 'timeout'});
        });
    }

    return;

}

/**
 * @register {Socket.connection, string, continuation(int) -> void}
 * @cpsBypass
 */
function write(connection_info, data, cont) {
    return write_common(connection_info, data, null, null,
                        callback_plain(cont, "Write failed", 0));
}

/**
 * @register {Socket.connection, 'a, continuation(int) -> void}
 * @cpsBypass
 */
function binary_write(connection_info, data, cont) {
    return write_common(connection_info, data, null, null,
                        callback_plain(cont, "Write failed", 0));
}

/**
 * @register {Socket.connection, int, string, \
              continuation(outcome(int,string)) -> void}
 * @cpsBypass
 */
function write_with_err_cont(connection_info, timeout, data, cont) {
    return write_common(connection_info, data, null, timeout,
                        callback_with_err_cont(cont, 0));
}

/**
 * @register {Socket.connection, int, 'a, \
              continuation(outcome(int,string)) -> void}
 * @cpsBypass
 */
function binary_write_with_err_cont(connection_info, timeout, data, cont) {
    return write_common(connection_info, data, null, timeout,
                        callback_with_err_cont(cont, 0));
}

/**
 * @register {Socket.connection, string, int, continuation(int) -> void}
 * @cpsBypass
 */
function write_len(connection_info, data, len, cont) {
    return write_common(connection_info, data, len, null,
                        callback_plain(cont, "Write failed", 0));
}

/**
 * @register {Socket.connection, 'a, int, continuation(int) -> void}
 * @cpsBypass
 */
function binary_write_len(connection_info, data, len, cont) {
    return write_common(connection_info, data, len, null,
                        callback_plain(cont, "Write failed", 0));
}

/**
 * @register {Socket.connection, int, string, int, \
              continuation(outcome(int,string)) -> void}
 * @cpsBypass
 */
function write_len_with_err_cont(connection_info, timeout, data, len, cont) {
    return write_common(connection_info, data, len, timeout,
                        callback_with_err_cont(cont, 0));
}

/**
 * @register {Socket.connection, int, 'a, int, \
              continuation(outcome(int,string)) -> void}
 * @cpsBypass
 */
function binary_write_len_with_err_cont(connection_info, timeout, data, len, cont) {
    return write_common(connection_info, data, len, timeout,
                        callback_with_err_cont(cont, 0));
}


// Similar to write_common, but with no length
function read_common(connection_info, timeout, callback) {

    if (connection_info.closed) {
        return callback({failure: 'socket closed'});
    } else if (connection_info.data.length != 0) {
        var res = get_result(connection_info);
        connection_info.data = [];
        return callback(res);
    } else if (connection_info.error) {
        var res = connection_info.error.toString();
        connection_info.error = null;
        return callback({failure: res});
    }

    // Needs to wait for an outcome

    connection_info.read_callback = callback;

    //console.log("connection_info.connection.listeners(timeout).length="+connection_info.connection.listeners('timeout').length);
    timeout = null;
    if (timeout != null) {
      //console.log("read_common: setTimeout = "+timeout);
        connection_info.connection.setTimeout(timeout, function () {
            unregister_and_call(connection_info, 'read_callback',
                                {failure: 'timeout'});
        });
    }

    return;

}

function getconv(conn, isbin) {
  if (!isbin && conn.is_binary) return 'string_of_binary';
  if (isbin && !conn.is_binary) return 'binary_of_string';
  return '';
}

/**
 * @register {Socket.connection, continuation(string) -> void}
 * @cpsBypass
 */
function read(connection_info, cont) {
    return read_common(connection_info, null,
                       callback_plain(cont, 'Read failed', getconv(connection_info,false)));
}

/**
 * @register {Socket.connection, continuation('a) -> void}
 * @cpsBypass
 */
function binary_read(connection_info, cont) {
    return read_common(connection_info, null,
                       callback_plain(cont, 'Read failed', getconv(connection_info,true)));
}

/**
 * @register {Socket.connection, int, \
              continuation(outcome(string,string)) -> void}
 * @cpsBypass
 */
function read_with_err_cont(connection_info, timeout, cont) {
    return read_common(connection_info, timeout,
                       callback_with_err_cont(cont, getconv(connection_info,false)));
}

/**
 * @register {Socket.connection, int, \
              continuation(outcome('a,string)) -> void}
 * @cpsBypass
 */
function binary_read_with_err_cont(connection_info, timeout, cont) {
    return read_common(connection_info, timeout,
                       callback_with_err_cont(cont, getconv(connection_info,true)));
}

/**
 * @register {Socket.connection -> int}
 */
function conn_id(connection_info) {
    return connection_info.id;
}
