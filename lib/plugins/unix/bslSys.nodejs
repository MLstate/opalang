var child_process = require('child_process');
var os = require('os');
var dns = require('dns');
var path = require('path');
var fs = require('fs');

fs.existsSync = fs.existsSync ? fs.existsSync : path.existsSync;

/** @opaType list('a) */
//'
/** @opaType outcome('a,'b) */
/** @opaType System.process */
/** @opaType System.process.out */

/** This returns the raw arguments from the command line,
 *  it's used to seed the Opa version of ServerArgs.
 *  We also kill off ServerArgs to prevent multiple reading of the same args.
 *  We need to retain --help because it's used by the scheduler as a flag for premature exit.
 *
 *  @register {-> opa[list(string)]}
 */
function argv() {
  var argv = process.argv, av = [];
  if (argv.length > 1) {
      argv.shift(); // shift node argument
  };
  for (var i = 0; i < process.argv.length; i++) {
    if (process.argv[i] == "--help") av[av.length] = "--help";
  };
  process.argv = av;
  return js2list(argv);
}

/**
 * @register {-> opa[list(string)]}
 */
function get_argv() {
    return js2list(process.argv);
}


/**
 * @register {-> string}
 */
function self_name() {
    return process.argv[0];
}

/**
 * @register {int -> 'a}
 */
function exit(code) {
    process.exit(code);
}

/** @module process */

/**
 * @register {string, string, continuation(string) -> void}
 * @cpsBypass
 */
function exec_cps(command, input, cont) {
    var proc = child_process.exec(command,
      function (error, stdout, stderr) {
        // We ignore the standard error
        if (error == null) {
          return_(cont, stdout);
        } else {
          return_(cont, error.toString());
        }
      }
    );

    proc.stdin.write(input);
    proc.stdin.end();

    return;
}

// Stub for the typechecker
/**
 * @register {string, string -> string}
 */
function exec(command, input) {
   assert(false);
}

/**
 * @register {string, string, (System.process.out -> void) -> System.process }
 */
function async_shell_exec(command, input, cont) {
    var proc = child_process.exec(command,
      function (error, stdout, stderr) {
         cont({stdout:stdout, stderr:stderr,  error:(error?js_some(error.toString()):js_none)});
      }
    );

    proc.stdin.write(input);
    proc.stdin.end();

    return {kill:cps(function(){if( proc.kill ) proc.kill('SIGTERM'); return js_void}), pid:proc.pid}
}

/** @endModule */

/** @opaType ip */

/**
 * @register {-> string}
 */
function gethostname() {
    return os.hostname();
}

// Convert an IP address in string form to an Opa ip value.
function opa_ip_of_string(address) {
    var m = address.match(/(\d+)\.(\d+)\.(\d+)\.(\d+)/);
    var res = empty_constructor();
    add_field(res, "a", parseInt(m[1]));
    add_field(res, "b", parseInt(m[2]));
    add_field(res, "c", parseInt(m[3]));
    add_field(res, "d", parseInt(m[4]));
    return res;
}

/**
 * @register {string, continuation(opa[option(ip)]) -> void}
 * @cpsBypass
 */
function gethostbyname_cps(address, cont) {
    dns.lookup(address, 4,
      function (err, address, family) {
        if (err) {
          return_(cont, js_none);
        } else {
          return_(cont, js_some(opa_ip_of_string(address)));
        }
      }
    );

    return;
}

// Stub for the typechecker
/**
 * @register {string -> opa[option(ip)]}
 */
function gethostbyname(address) {
    assert(false);
}

/**
 * @register {string, continuation(opa[list(ip)]) -> void}
 * @cpsBypass
 */
function gethostsbyname_cps(address, cont) {
    dns.resolve(address,
      function (err, addresses) {
        if (err) {
          return_(cont, js2list([]));
        } else {
          return_(cont, js2list(addresses.map(opa_ip_of_string)));
        }
      }
    );

    return;
}

// Stub for the typechecker
/**
 * @register {string -> opa[list(ip)]}
 */
function gethostsbyname(address) {
    assert(false);
}


/**
 * @register {-> int}
 */
function get_memory_usage() {
    return process.memoryUsage().rss;
}

/**
 * @register {string -> opa[option(string)]}
 */
function get_env_var(key) {
  var r = process.env[key];
  return typeof r == 'undefined' ? js_none : js_some(r);
}
