/*
    Copyright Â© 2011-2013 MLstate

    This file is part of Opa.

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
var Crypto = require('crypto');
var ursa = require('ursa');
var fs = require('fs');

/** @externType Crypto.hash */

/** @externType binary */
/** @externType continuation('a) */

/**
 * @register {int, continuation(binary) -> void}
 * @cpsBypass
 */
function secure_random(length, k) {
  Crypto.randomBytes(length, function(ex, buf){
    return_(k, binary_of_buffer(buf))
  })
}

//////////////////////////////////////////////////
// HASH STREAM ///////////////////////////////////
//////////////////////////////////////////////////
/**
 * @register {Crypto.hash, binary -> void}
 */
function add(hash, data) {
  hash.update(buffer_of_binary(data));
}

/**
 * @register {Crypto.hash -> binary}
 */
function digest(hash){
  return binary_of_buffer(new Buffer(hash.digest(), 'binary'));
}

/**
 * @register {string -> Crypto.hash}
 */
var create_hash = Crypto.createHash

/**
 * @register {string, binary -> Crypto.hash}
 */
function create_hmac(algo, key){
  return Crypto.createHmac(algo, buffer_of_binary(key));
}

//////////////////////////////////////////////////
// HASH STREAM ///////////////////////////////////
//////////////////////////////////////////////////
/**
 * Compute the MD5 signature of a string.
 *
 * @register {string -> string}
 */
function md5(data) {
    var hash = Crypto.createHash('md5');
    hash.update(data);
    return hash.digest('hex');
}

/**
 * Encode a binary string as Base 64
 *
 * @param {!binary} bin A binary of arbitrary length.
 * @return {!string} A (longer) representation, encoded as base 64
 * @register {binary -> string}
 */
function base64_encode(bin) {
    return buffer_of_binary(bin).toString('base64');
}

/**
 * @register {binary -> string}
 */
function base64_encode_compact(bin) {
  // compact just means no lines and no padding
  var data = base64_encode(bin);
  data = data.replace('\n', '');
  if (data[data.length-1] == '=') {
      if (data[data.length-2] == '=') return data.slice(0,-2);
      else return data.slice(0,-1);
  }
  return data;
}

/**
 * @register {binary -> string}
 */
function base64_encode_multiline(bin) {
  // This faithfully follows the strange pattern of carriage returns
  // generated by Cryptokit.
  var width = 72;
  var data = base64_encode(bin);
  if (data.length < 4) return data;
  if (data.length < width) return data+'\n';
  var strs = [];
  for (var i = 0; i < data.length; ) {
    var l = (data.length - i > width) ? width : data.length - i;
    var ss = data.substr(i, l);
    if (l > 4 || (data[i+l-1] != '=')) ss += '\n';
    strs.push(ss);
    i += l;
  }
  return strs.join("");
}

/**
 * @param {!string} str A base64-encoded text
 * @return {!binary} A decoded representation
 * @register {string -> binary}
 */
function base64_decode(data) {
    return binary_of_buffer(new Buffer(data, 'base64'));
}

/**
 * @register {string, binary -> binary}
 */
function hash_digest(algo, bin) {
  return binary_of_buffer(
    new Buffer(Crypto.createHash(algo).update(buffer_of_binary(bin)).digest('binary'),
    'binary')
  );
}

/**
 * @register {string, binary, binary -> binary}
 */
function hmac_digest(algo, key, bin) {
  return binary_of_buffer(
    new Buffer(Crypto.createHmac(algo, buffer_of_binary(key)).update(buffer_of_binary(bin)).digest('binary'),
    'binary')
  );
}

/* RSA */

/** @externType Crypto.RSA.key */

/**
 * @register {int -> Crypto.RSA.key}
 */
function rsa_new_key(size) {
  return ursa.generatePrivateKey(size);
}

/**
 * @register {string, option(string), option(string) -> Crypto.RSA.key}
 */
function read_rsa_key(pem, password, encoding) {
  return ursa.createPrivateKey(fs.readFileSync(pem))
}

/**
 * @register {Crypto.RSA.key, binary -> option(binary)}
 */
function rsa_encrypt(key, msg) {
  try {
    var res = key.encrypt(buffer_of_binary(msg));
    return binary_of_buffer(new Buffer(res));
  } catch(e) { console.log(e); return null }
}

/**
 * @register {Crypto.RSA.key, binary -> option(binary)}
 */
function rsa_decrypt(key, msg) {
  try {
    var res = key.decrypt(buffer_of_binary(msg));
    return binary_of_buffer(new Buffer(res));
  } catch(e) { console.log(e); return null }
}

/* Cipher */

/**
 * @register {string, binary, binary -> option(binary)}
 */
function cipher_encrypt(algorithm, password, data) {
  try {
    var cipher = Crypto.createCipher(algorithm,buffer_of_binary(password));
    var crypted = cipher.update(buffer_of_binary(data),'binary','hex');
    crypted += cipher.final('hex');
    return binary_of_buffer(new Buffer(crypted));
  } catch(e) { console.log(e); return null }
}

/**
 * @register {string, binary, binary -> option(binary)}
 */
function cipher_decrypt(algorithm, password, data) {
  try {
    var decipher = Crypto.createDecipher(algorithm,buffer_of_binary(password));
    var dec = decipher.update(buffer_of_binary(data),'hex','binary');
    dec += decipher.final('utf8');
    return binary_of_buffer(new Buffer(dec));
  } catch(e) { console.log(e); return null }
}