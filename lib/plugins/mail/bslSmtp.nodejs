var nodemailer = require("nodemailer");
var smtpTransport = require("nodemailer-smtp-transport");

var debug = false

/** @externType continuation('a) */
/** @externType caml_list('a) */
/** @externType caml_tuple_2('a,'b) */
/** @externType caml_tuple_4('a,'b,'c,'d) */
/** @externType SSL.secure_type */

/** @opaType list('a) */
/** @opaType tuple_2('a, 'b) */
//'

/** @module SmtpClient */

  /** @opaType Email.send_status */

  /**
   *  @register {string, string, string, string, \
                 string, string, string, \
                 caml_list(caml_tuple_4(string,string,string,string)), \
                 caml_list(caml_tuple_2(string,string)), \
                 opa[option(string)], opa[option(string)], opa[option(int)],\
                 opa[option(string)], opa[option(string)], opa[option(string)],\
                 opa[option(SSL.secure_type)], \
                 (opa[email_send_status], continuation(opa[void]) -> void), \
                 continuation(opa[void]) -> void}
   *  @cpsBypass
   */
  function send_mail(mfrom, mto, mcc, mbcc, subject, mdata, html, files, custom_headers, via, host, port, auth, user, pass, secure, callback, k) {

    // Creation of the mail.
    var attachments =
      files.map(function(file) {
	      if (file.f3 == "base64") content = new Buffer(file.f4, 'base64')
	      else content = file.f4
	      return {
	        filename: file.f1,
	        content: content,
	        contentType: file.f2
	      }
      });

    var headers = empty_constructor();
    custom_headers.forEach(function(header) {
	    if (header.f1 != "size")
      	add_field(headers, header.f1, header.f2);
    })

    var mailOptions = {
	    from: mfrom, // Sender address.
	    to: mto,     // List of receivers.
	    cc: mcc,
	    bcc: mbcc,
	    subject: subject, // Subject line.
	    text: mdata,      // Plaintext body.
	    // Html field set only if non empty.
	    headers: headers,
	    attachments: attachments
    };
    if (html != "")
      mailOptions.html = html

    // Creation of the transporter.
    var transporter;
    if (host.none) {
	    // Configure the transporter as a direct connection.
	    transporter = nodemailer.createTransport();
    } else {
      // Configure the transporter with the given options.
	    var options = {
	      host: option2default(via, host.some),
	      port: option2default(port, 25),
	      secure: !(secure.none),
	      debug: debug
      };
	    if (!auth.none) {
	      options.auth = {
		      user: option2default(user, ""),
		      pass: option2default(pass, "")
	      };
	    }
	    transporter = nodemailer.createTransport(smtpTransport(options));
    }

	  // Send mail with defined transporter.
    transporter.sendMail(mailOptions, function(error, info){
      if (error) {
	      callback({error:error}, ccont(k, function(){}))
      } else if (info && info.rejected && info.rejected != "") {
        callback({bad_recipients: info.rejected.toString()}, ccont(k, function(){}))
      } else {
        callback({ok: ""}, ccont(k, function(){}))
      }
      transporter.close();
    });

    return_(k, js_void);
    return;

  }

  /**
   *  @register {opa[option(string)], opa[option(string)], opa[option(int)],\
                 opa[option(string)], opa[option(string)], opa[option(string)],\
                 opa[option(SSL.secure_type)], \
                 (opa[email_send_status], continuation(opa[void]) -> void), \
                 continuation(opa[void]) -> void}
   *  @cpsBypass
   */
  function check_smtp(via, host, port, auth, user, pass, secure, callback, k) {
    // Creation of the transporter.
    var transporter;
    if (host.none) {
      // Configure the transporter as a direct connection.
      transporter = nodemailer.createTransport();
    } else {
      // Configure the transporter with the given options.
      var options = {
        host: option2default(via, host.some),
        port: option2default(port, 25),
        secure: !(secure.none),
        debug: debug
      };
      if (!auth.none) {
        options.auth = {
          user: option2default(user, ""),
          pass: option2default(pass, "")
        };
      }
      transporter = nodemailer.createTransport(smtpTransport(options));
    }

    if (transporter)
      callback({ok: ""}, ccont(k, function(){}))
    else
      callback({error: ""}, ccont(k, function(){}))

    return_(k, js_void);
  }

/** @endModule */

