//[appendix]
Filename extensions
===================

This appendix lists the different filename extensions you can meet in an Opa project,
with a short description of the nature of the corresponding file or directory.

This part describes for each kind of file in an Opa project :

* a description of the file, meaning what kind of file it is, and what it contains ;
* an output section, documenting what tool/application produces these files ;
* an input section, documenting what tool or what application actually reads these files


// TODO: add hyperlink to other part mentionning and/or handling these files
// exemple: api ==> opadoc, etc.

// Alphabetically

api
---

### Description

_api_ files are text files using a _json_ syntax for encoding the types informations extracted
from Opa files, associated to their positions in the source code.

### Produced by

For each opa file, there can be one corresponding api file, generated by the opa compiler using the option `--api`

    user@computer:~/$ ls
    bar  foo.opa
    
    user@computer:~/$ ls bar
    bar.opa
    
    user@computer:~/$ opa --api bar/bar.opa foo.opa
    
    user@computer:~/$ ls
    bar  foo.api  foo.opa  foo.exe
    
    user@computer:~/$ ls bar
    bar.api  bar.opa

### Used by

These files are read by _opadoc_ to build code documentation. They cannot be given in the command
line of opadoc directly, but they are found automatically by association with any Opa file found directly
or in one of the subdirectories of the commnand line :

    user@computer:~/$ ls
    bar  foo.api  foo.opa
    
    user@computer:~/$ ls bar
    bar.api  bar.opa
    
    user@computer:~/$ opadoc foo.opa bar -o doc

// TODO hyperlink=>opadoc

api-txt
-------

### Description

These files are text files written using the Opa syntax, containing the inferred types of toplevel elements
of a corresponding Opa file. They contain a subset of the information contained in a _api_ file, but
in an human readable syntax (opa rather than json).

### Produced by

Same than _api_ files, generated by _opa_ with the option `--api`

### Used by

Meant to be read by an human, e.g. for debugging.

conf
----

### Description

Configuration of packages for building medium and large applications.
These files are used for setting the package organisation of an application,
without editing the source files. Their utilisation is optional. It offers
a functionality equivalent with the keyword *import* and *package* of
the Opa syntax.

### Produced by

Hand written by an author of an opa application.

### Input

_opa_

### Syntax

Commented line starts with a sharp character '#'.
Then it follows the entry point _packages_ of this grammar :

    :: packages <- package list
    
    package <- $package_name ":" entry list
    
    entry <- import / source
    
    import <- "import" package_entry
    
    source <- $filename
    
    package_entry <- $package_name / $extension_package_name

{block}[TIP]
### About _filename_

 * Relative path of filenames are given from the emplacement of the conf file itself
 * It is possible to refer to _environment variables_ in a conf file
{block}

{block}[TIP]
### About package_name

They follows the same conventions as the _import_ construct in Opa,
but no spaces are allowed using the extension syntax, as in these examples:
examples:

    import stdlib.*
    import toto.{foo,bar}
{block}

//[float]
##### Example

Here is a small example:

    # a first package, with 2 files
    my_package:
      import toto.{foo,bar}
      relative/path/to/myfile.opa
      relative/path/to/myotherfile.opa

    # a second package, importing the first one
    my_otherpackage:
      import my_package
      path/to/some_file.opa

jsconf
------

### Description

conf for bsl js files,
Cf part about plugin for the syntax of these files

### Produced by

Hand written by the author of a js plugin.

### Used by

opa-plugin-builder

opa
---

### Description

This is the extension of the Opa files.
Most of the files in an Opa project are .opa files

### Produced by

Hand written by authors of an Opa application.

### Used by

_opa_, _opadoc_

opack
-----

### Description

_opack_ files are used to group the command line options and arguments for invoking _opa_
to build an Opa application.

##### Example:

    user@computer:~/$ opa myproject.opack

is almost equivalent to

    user@computer:~/$ cat myproject.opack | grep -v '#' | xargs opa

### Produced by

Hand written by authors of an Opa application.

### Used by

_opa_

### Syntax

This is a file where lines correspond to argument or options of the opa compiler.
Lines may be commented with `#`, and it is possible to refer to _environment variables_ in a conf file

##### Example

    # This is an example of opack file
    myfile_1.opa
    myfile_2.opa
    --warn-error root

//[[filenames_opp]]
opp
---

### Description

_opp_ stands for OPa Plugin. An _opp_ is a directory containing object files and compiled code,
for building an Opa application using external primitives written directly in _Javascript_ and/or in _Ocaml_.

### Produced by

_opa-plugin-builder_

### Used by

_opa_, _opa-plugin-browser_

opx
---

### Description

An _opx_ is a directory containing object files and compiled code from a Opa package.
For each Opa package correspond one _opx_ directory once compiled by _opa_.
Some _opx_ files are distributed with _opa_, these are the compiled packages of the standard library.

### Produced by

_opa_

### Used by

_opa_
