Hello, bindings -- Binding other languages
==========================================

It is possible to bind Opa with other languages thanks to a *BSL*: Binding System Library.
Currently, there is a native support to Javascript on the client side, and to OCaml on the server side.

This chapter shows an example of binding between [Opa, OCaml and Javascript](/manual/Hello--bindings----Binding-other-languages/Binding-Ocaml-and-Javascript),
as well as an example to see [C primitives calls from Opa](/manual/Hello--bindings----Binding-other-languages/Binding-C).

A complete example of binding with an external Javascript library is available in the chapter
[Hello, reCaptcha](/manual/Hello--reCaptcha-(and-the-rest-of-the-world)).

In Opa, a function written in an other language is called a
[foreign function](/manual/The-core-language/Foreign-function-interface), a _bypass_,
or an _external primitive_. All this designations mean that the implementation of the
function is not written in Opa.

Part of the Opa standard library uses external primitives, such as low level arithmetic
operations, bindings with the DOM API on the client side, etc.

Using external primitives in Opa applications has two main motivations :

- provide a new functionality not available in the standard library, and the implementation cannot easily be written in Opa (e.g. using low level system call). Although it does not often happen because of the completeness of the Opa standard library, it remains useful for specific applications.
- bind with existing code: you want to use an external library without reimplementing it in Opa (e.g. numerical computing library), or waiting for it to be rewritten in Opa (e.g. for a quick prototyping, hybrid applications)

Since _OCaml_ supports bindings for many languages, it is possible, on the server side of an Opa applications,
to use functions written in any language supporting an OCaml bindings (C, Java, Python, etc.)

Although we are working on a native support for binding Opa and _C_ applications,
this is not available in the distribution of Opa yet. Waiting for this support,
it is nevertheless possible to bind Opa and _C_ via _OCaml_
(This chapter contains [an example]((/manual/Hello--bindings----Binding-other-languages/Binding-C)) using a external primitive implemented in _C_,
using the _OCaml/C_ binding)

{block}[CAUTION]
### Client/Server distribution

When you define an external primitive, the function is available only on the
side of the implementation. (Javascript on the client side, _OCaml_, _C_ on the server side).
If you do not provide both client and server sides of the implementation of the external primitive,
it has an impact on the client/server distribution of the Opa code.
You have to think about it before deciding to use an external binding.
Writing a function in pure Opa gives you the guarantee that the function is available on
both side.
{block}

Binding Ocaml and Javascript
----------------------------

This part shows a complete example, including compilation command line.

    user@computer:~/$ ls
    hello_binding.opa  plugin.js  plugin.ml  Makefile

##### Makefile
file://opa_binding_examples/Makefile

### External implementation

Implementations goes into files, and file names should be called the same way between
server and client side implementation.

The implementation files are files written in the syntax of the bound language,
adding some Opa directives for registering the primitives and the types exported
for being used from Opa code.

In Javascript, we use a special syntax for introducing function names (`##args`),
used for simulating namespaces. Using the directive `##args` following a `##register`
directive defining the function `stammer` in the file `plugin` will introduce
the function named `plugin_stammer`. The use of `##args` is optional, we can write instead:

##### plugin.ml
[ocaml]file://opa_binding_examples/plugin.ml

##### plugin.js
[js]file://opa_binding_examples/plugin.js

    ##register stammer : string -> string
    function plugin_stammer(s)
    {
        return "client is stammering: " + s + s + s ;
    }

but it is not advised to handle manually the namespaces.
Using the directive `##args` implies a check of arity with the registered type.

### Plugin Compilation

The plugin files are compiled using the tool _opa-plugin-builder_,
distributed with the _Opa_ compiler. You can refer to the documentation of the tool
for more details, and the part about [opp files](/manual/Filename-extensions/opp).
_opa-plugin-builder_ produces an _opp_ directory from plugin sources files.
The name of the plugin should be specified with the option `-o` :

    user@computer:~/$ opa-plugin-builder plugin.js plugin.ml -o plugin
    user@computer:~/$ ls
    hello_binding.opa  plugin.js  plugin.ml  plugin.opp

### Plugin browsing

The plugin `plugin.opp` is ready to be linked with an Opa application.
You can browse the plugin, using the tool _opa-plugin-browser_.

    user@computer:~/$ opa-plugin-browser plugin.opp
    (you enter a tiny shell-like environment)
    bslbrowser:/$ ls
      + module <plugin>
    bslbrowser:/$ cd plugin
    bslbrowser:plugin/$ ls
    + in module <plugin> \:
            stammer            \: string -> string {js, ml}
    (try also: 'help')

When you are browsing a plugin, you can check that the exported functions are correctly
stored in the _opp_, and get familiar with the information stored
about the external primitives (try `ls -v`).

[[key_normalization]]
#### Key normalization

External Primitives are indexed using a key normalisation. The key is obtained
from the path (file of declaration + module hierarchy), by concatenation
of all path elements, using _underscore_ between elements replacing dots by _underscores_,
and finally converted to lowercase.

In this example, the key of the function `stammer` is `plugin_stammer`.
This key is used for referring to this function from the Opa code.

For implementing primitives on both sides, it is mendatory for the server and the client primitives
to have the same name. This implies to choose valid filenames for Ocaml modules.
For files implementing primitives on the client only, it is possible to use dots and dash in filenames,
they are transformed for computing the key : `-` is replaced by `_dash_` and `.` is replaced by `_dot_.

Example: `jquery-1.6.1.js` becomes : `jquery_dash_1_dot_6_dot_1.js`

### Binding in Opa

The [syntax](/manual/The-core-language/Foreign-function-interface) for introducing external primitives in Opa
is `%% key %%`, referring to the `key` of the external primitive.

    plugin_stammer = %% plugin_stammer %%

{block}[TIP]
The keys found in the syntax are also normalized by the compiler,
which means that calls are case insensitive, and so the following lines are equivalent:
{block}

    plugin_stammer = %%plugin.stammer%%
    plugin_stammer = %% plugin.stammer %%
    plugin_stammer = %% Plugin.stammer %%
    plugin_stammer = %% pLuGin_staMmeR %%

You can find there a simple _Opa_ application for calling either the client or the server
side implementation of the function `stammer`, with an input for giving the argument.

##### hello_bindings.opa
[opa|fork=opa_bindings_examples]file://opa_binding_examples/hello_bindings.opa

Compiling the application requires an extra argument to be passed to the _Opa_ compiler
so that it finds the type of the external primitive, and find the
implementation to link with the server. Note that parameters are not ordered.

    user@computer:~/$ opa plugin.opp hell_bindings.opa
    user@computer:~/$ ./hell_bindings.exe

Binding C
---------

This part shows an integration of C code in an Opa application, via an _OCaml_
binding. A native support is currently in integration, available in a future
version of Opa.

    user@computer:~/$ ls
    freq.opa  freq.c  c_binding.ml  Makefile

##### Makefile
file://opa_binding_examples/c_binding/Makefile

##### freq.c
[c]file://opa_binding_examples/c_binding/freq.c

##### c_binding.ml
[ocaml]file://opa_binding_examples/c_binding/c_binding.ml

##### freq.opa
[opa|fork=opa_bindings_examples]file://opa_binding_examples/c_binding/freq.opa

### Compilation

    user@computer:~/$ ocamlopt.opt freq.c
    user@computer:~/$ opa-plugin-builder c_binding.ml -o c_binding
    user@computer:~/$ opa --mllopt $PWD/freq.o c_binding.opp freq.opa
    user@computer:~/$ ./freq.exe

For more details about integration between C/OCaml, you can refer to the
manual of Objective Caml.

Documentation
-------------

This paragraph describes the exhaustive list of directives handled by `opa-plugin-builder` in OCaml and Javascript files.
The [conventions adopted](/manual/The-core-language/Formal-description) to describe the syntax of theses directives are the same as the one used
for describing the core language syntax.

The directives are used to declare the types and values to export in Opa.
Opa is type-checked at compile time, hence it is mandatory to declare the types of the external primitives.

{block}[CAUTION]
There is a restriction about types available in the interface between Opa and foreign implementations.
You should keep in mind that there are differences of representation of values between languages, a fortiori between
Opa, OCaml, and Javascript,
and a value passed through the register interface should most of the time be translated. For the most common types, an automatic
projection is done by Opa (constants, bool, option). For more complex values, you will need to handle the projection
manually, via the ServerLib //<...>
on the server side, and the ClientLib //<...>
on the server side.
When you are designing a new plugin, you should keep in mind that value
projections may be inefficient, and it often is more convenient to use primitive types only.
{block}

### General syntax

#### Syntax of types

```
type ::=
| int
| string
| float
| void
| bool
| option(<type>)
| <type>* sep , -> <type>
| <type-var>
| <type-ident> ( <type>* sep , )?
| opa[<type>]
| ( <type> )
```

#### Syntax of directives

```
directive ::= ## <properties>? <directive_name> <arguments>

properties ::= [ <property>+ sep , ]
property ::=
| <tag>
| <tag> : <value>

tag ::= <see tags documentation, depends of the directive_name>

directive_name ::=
| extern-type
| opa-type
| module
| endmodule
| register
| args
| property

arguments ::= <see arguments documentation, depends of the directive_name>
```

The properties are used for setting options to directives, for modifying their behavior,
or for attaching extra information to them. The directive `##property` is used for
changing the behavior of the other directives until the end of the current file.
The supported tags are specific to the directive.
In standard cases, you should not need tags and properties (advanced use only)

##### Syntax of arguments

```
verbatim-ocaml ::= some valid OCaml code

type-ident ::= same as Opa type ident

parameters ::=
| ( <type-var>+ sep , )
```

##### Syntax of arguments for [##extern-type](/manual/Hello--bindings----Binding-other-languages/External_types)


```
arguments(##extern-type) ::=
| <type-ident> <parameters>? ( = <verbatim-ocaml> )?
```

##### Example:

```
##extern-type hashset('a) = ('a, unit) Hashtbl.t
##extern-type black
```

##### Syntax of arguments for [##opa-type](/manual/Hello--bindings----Binding-other-languages/Opa_types)

```
arguments(##opa-type) ::=
| <type-ident> <parameters>?
```

##### Example:

```
##opa-type option('a)
```

##### Syntax of arguments for ##register

```
arguments(##register) ::=
| <name> : <type>
| <name> \ <name> : <type>
| <name> \ `<verbatim-ocaml>` : <type>
```

##### Example:

    ##register int_of_string : string -> option(int)
    ##register int_add \ `Pervasives.( + )` : int, int -> int

{block}[TIP]
_Backslash_ '*\*' can also be used to dispatch a directive on several lines if
it does not fit on one line of source, e.g. a function using big types.
{block}

##### Example:

```
##register my_function :         \
   (int, int, int, int -> int),   \
   int ->                         \
   int
```

#### Tags

Tags are needed for advanced uses only. The casual user can simply ignore them.

{table}
{*  directive name | supported tags    | arguments         *}
{|  extern-type     | opacapi          | type definition   |}
{|  opa-type        | opacapi          | type definition   |}
{|  module          | -                | module name       |}
{|  endmodule       | -                | -                 |}
{|  register        | backend, opacapi, restricted, no-projection, cps-bypass | implementation name, and type of the value |}
{|  args            | -                | formal parameters |}
{|  const           | -                | -                 |}
{|  property        | mli, endmli      | -                 |}
{table}

### About Supported Types

{block}[TIP]
Compiling OCaml plugins, _opa-plugin-builder_ will perform a type check to ensure that the functions
defined in plugins have consistent types with respect to their registered definition.
We are also working on a step of Javascript validation to ensure some consistent properties (functions arities, etc.)
{block}

##### Example: the following definitions will generate a static error :

```
##register foo : int, int -> int
let foo a b = a +. b

##register foo : int, int -> int
##args(x)
{
  return x+x;
}
```

The supported types in the interface are :

- void and constants;
- bool;
- option;
- external types;
- opa types;
- polymorphic types.

Before writing a new plugin, you should think about the kind of types you will need to manipulate,
and the side where the values of theses types will be processed: server only, client only, or both.
The latter case requires types to be serializable.

{block}[CAUTION]
You should also try not to use functional arguments.
The Opa code is rewritten in CPS, and the external function are generally not in CPS.
Opa proceed to a projection of a CPS function into a non CPS function for passing it to the external
functional primitive, using an hint about the time needed for this function to compute.
In general it is not possible to know statically a bound of the time needed for a functional argument to compute :
typically, in case of an asynchronous function (e.g. with client/server I/O) you may get a runtime error when the
external functional primitive will be executed, meaning that the response of the function is not available at
the end of the timeout used in the projection.
Nevertheless, if you really need to have asynchronous functional arguments, you can contact MLstate
for a support, or browse the source code of the standard library (looking for the tag _cps-bypass_)
{block}

#### Automatic projections

As often when you write a binding between several languages, you have to deal with the fact that
values can have different runtime representations in each language. The approach used e.g. in the OCaml/C binding,
is to manipulated OCaml values using a special set of macros and function (`CAMLparam`, `CAMLreturn`, etc.), and
to use a manual projection of values between the two languages, e.g. using _Val_int_ for building an OCaml int
from a C int, etc.

```
value add_ocaml_int(value a, value b)
{
  int ia, ib;
  CAMLparam2 (a, b);
  ia = Int_val(a);
  ib = Int_val(b);
  CAMLreturn (Val_int(ia + iab));
}
```

The code resulting of this manual projection is quite verbose, and the experience has shown that it is easy
to write incorrect code, e.g. forgetting part of projections, especially if the code is not typed.

From this constatation, we decided in Opa to handle automatically the projections of values for the most common
types allowed in the interface between Opa and foreign languages.

Let's see an example:

```
(*
  In the ServerLib, we have the following manipulation of int values :

  type ty_int

  val wrap_int : int -> ty_int
  val unwrap_int : ty_int -> int
*)
let add a b =
  let ia = ServerLib.unwrap_int a in
  let ib = ServerLib.unwrap_int b in
  let ic = ia + ib in
  ServerLib.wrap_int ic
```

This example implements a function adding two opa ints using the OCaml + primitive combined with projection between
OCaml ints and Opa ints.

Now, we will save the code into the file `int.ml`, try to register this function and building an Opa plugin.

```
##register add : int, int -> int
let add a b =
  let ia = ServerLib.unwrap_int a in
  let ib = ServerLib.unwrap_int b in
  let ic = ia + ib in
  ServerLib.wrap_int ic
```

Let's try to compile it:

```{.sh}
user@computer:~/$ opa-plugin-builder int.ml -o int
> File "intMLRuntime.ml", line 1, characters 0-1:
> Error: The implementation intMLRuntime.ml
>        does not match the interface intMLRuntime.cmi:
>        Modules do not match:
>          sig
>            val add : ServerLib.ty_int -> ServerLib.ty_int -> ServerLib.ty_int
>          end
>        is not included in
>          sig val add : int -> int -> int end
>        Values do not match:
>          val add : ServerLib.ty_int -> ServerLib.ty_int -> ServerLib.ty_int
>        is not included in
>          val add : int -> int -> int
```

We get there an error, the code does not type. Why ?

The function manipulates int, and this is pretty clear that if you want to register a function working on int,
you want to use it in Opa, so you will need to projects values. To avoid this, _opa-plugin-builder_ transforms
the code and inserts the projections, unless you specify in the interface that you are explictly manipulating
opa values, and want to handle the projection yourself:

```
##register add : opa[int], opa[int] -> opa[int]
let add a b =
  let ia = ServerLib.unwrap_int a in
  let ib = ServerLib.unwrap_int b in
  let ic = ia + ib in
  ServerLib.wrap_int ic
```

```{.sh}
user@computer:~/$ opa-plugin-builder int.ml -o int
# compilation is successfull
```

```
##register add : int, int -> int
let add a b = a + b
```

```{.sh}
user@computer:~/$ opa-plugin-builder int.ml -o int
# compilation is successfull
```

{block}[TIP]
If the version of the compiler knows that some types have the same representation in Opa or in Ocaml,
projections will not be generated.
{block}

#### Representation of values

##### OCaml

{table}
{* type   | interface syntax              | ocaml representation | opa representation     *}
{| int    | int VS opa[int]               | int                  | ServerLib.ty_int       |}
{| float  | float VS opa[float]           | float                | ServerLib.ty_float     |}
{| string | string VS opa[string]         | string               | ServerLib.ty_string    |}
{| void   | void VS opa[void]             | unit                 | ServerLib.ty_void      |}
{| bool   | bool VS opa[bool]             | bool                 | ServerLib.ty_bool      |}
{| option | option('a) VS opa[option('a)] | 'a option            | 'a ServerLib.ty_option |}
{table}

##### Javascript

{table}
{* type   | interface syntax              | ocaml representation              | opa representation     *}
{| int    | int VS opa[int]               | int                               | ClientLib_ty_int       |}
{| float  | float VS opa[float]           | float                             | ClientLib_ty_float     |}
{| string | string VS opa[string]         | string                            | ClientLib_ty_string    |}
{| void   | void VS opa[void]             | undefined or null                 | ClientLib_ty_void      |}
{| bool   | bool VS opa[bool]             | bool                              | ClientLib_ty_bool      |}
{| option | option('a) VS opa[option('a)] | None if null or Some 'a otherwise | 'a ClientLib_ty_option |}
{table}

An API is available for manipulating opa values, on the server side as well as on the client side. //<...>

#### External type VS Opa type

If you want to use an external library providing an API manipulating types such than you do not need
to see in Opa the implementation of these types, you can refer to the documentation
of [external types](/manual/Hello--bindings----Binding-other-languages/External_types).

If you want to be able to manipulate Opa values in the external implementation, you can refer to the
documentation of [Opa types](/manual/Hello--bindings----Binding-other-languages/Opa_types).

[[External_types]]
### External types

External types are used for manipulating in Opa foreign values without
manipulating the raw implementation of their types, using a foreign interface.
Once in Opa, each external type is unifiable only with itself. The implementation is hidden in Opa.

An extern type is generally available only in one side : the side of its implementation.
Nevertheless, it is possible to define a common API on the client and the server side,
and providing explicit (de)serialization functions to make types available
on both side, and able to travel from one side to the other.

{block}[TIP]
In the standard library, low level arrays are implemented using extern-type definitions.
{block}

#### Complete example using external types

This example shows how to use the module `Big_int` of the _OCaml_ standard library to add
2 bigints given by a user via a simple web interface.

    user@computer:~/$ ls
    bigint.ml  bigint.opa  Makefile

##### Makefile
file://opa_binding_examples/external_types/Makefile

##### bigint.ml
file://opa_binding_examples/external_types/bigint.ml

##### bigint.opa
file://opa_binding_examples/external_types/bigint.opa

[[Opa_types]]
### Opa types

Using Opa types in plugin requires a good knowledge of Opa, and can be considered as advanced use.
The purpose of Opa types is to create or to wander Opa structures in the external implementation.

This is needed when you want to return or to take in argument complex values.

{block}[TIP]
For people familiar with C/Ocaml bindings, the manipulation of opa values using the server_lib or the client_lib
correspond to the macro CAMLparam, CAMLreturn, Store_field, etc.
{block}

//[[client_lib]]
//#### ClientLib
//Coming soon...
// TODO!

//[[server_lib]]
//#### ServerLib
//Coming soon...
// TODO!

#### Complete example using Opa types manipulation

This example shows how to use the opa-type construction from OCaml using the _ServerLib_. //<...>
We take the opportunity to bind _Opa_ with the NDBM database.

The example is a tiny application for submitting triplets in a persistent external database,
finding back the information, and guessing the age of the Captain.

For compiling the example you need:
-ndbm dev library;
-ndbm OCaml binding.

{block}[CAUTION]
This example is of course heretic because _Opa_ has its own database.
The purpose is to take benefits of a small example to show that you can really extend _Opa_
as much as you want using _OCaml_ bindings (ndbm is implemented originally in C).
{block}

    user@computer:~/$ ls
    dbm.ml  dbm.opa  Makefile

##### Makefile
file://opa_binding_examples/opa_types/Makefile

##### dbm.ml
file://opa_binding_examples/opa_types/dbm.ml

##### dbm.opa
[opa|fork=opa_bindings_examples]file://opa_binding_examples/opa_types/dbm.opa

### Exercise
Add a primitive which return a opa-list of entries, and add a button to show all entries of the database.
